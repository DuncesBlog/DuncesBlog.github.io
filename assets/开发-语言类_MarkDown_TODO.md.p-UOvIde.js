import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.iMXuyU9c.js";const c=JSON.parse('{"title":"网页收藏夹","description":"","frontmatter":{},"headers":[],"relativePath":"开发-语言类/MarkDown/TODO.md","filePath":"开发-语言类/MarkDown/TODO.md"}'),t={name:"开发-语言类/MarkDown/TODO.md"},p=n(`<h1 id="网页收藏夹" tabindex="-1">网页收藏夹 <a class="header-anchor" href="#网页收藏夹" aria-label="Permalink to &quot;网页收藏夹&quot;">​</a></h1><pre><code>[MarkDown文件插入图片.CSDN](https://blog.csdn.net/Aoman_Hao/article/details/134385318),

[Markdown 文档基础语法.B站](https://www.bilibili.com/video/BV1eJ4m157kC)
</code></pre><hr><p>下面抄自于<a href="https://www.bilibili.com/video/BV1w3411N7zM" target="_blank" rel="noreferrer">CodeSheep.B站</a>,视频时间(04:40)</p><h1 id="一级标题" tabindex="-1">一级标题 <a class="header-anchor" href="#一级标题" aria-label="Permalink to &quot;一级标题&quot;">​</a></h1><h2 id="二级标题" tabindex="-1">二级标题 <a class="header-anchor" href="#二级标题" aria-label="Permalink to &quot;二级标题&quot;">​</a></h2><h3 id="三级标题" tabindex="-1">三级标题 <a class="header-anchor" href="#三级标题" aria-label="Permalink to &quot;三级标题&quot;">​</a></h3><p><strong>加粗正文</strong> 正文内容 <em>倾斜文本</em> 正文内容</p><h2 id="分隔符" tabindex="-1">分隔符 <a class="header-anchor" href="#分隔符" aria-label="Permalink to &quot;分隔符&quot;">​</a></h2><p>图片: <img src="https://q6.itc.cn/q_70/images03/20240601/80b789341c9b45cb8a76238650d288a5.png" alt="" loading="lazy"></p><p>代码块</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string[] args){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; hashMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hashMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hashMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hashMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Map.Entry&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>数学公式:</p><p>$$ \\left[ \\begin{array}{c|ccc} a &amp; b &amp; \\cdots &amp; h\\ a &amp; b &amp; \\cdots &amp; h\\ \\hline \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\a &amp; b &amp; \\cdots &amp; h \\end{array} \\right] $$</p><p>$$ f(x_1, x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$</p><p>$$\\sum_{n-1}^t x_n=0$$</p><p>表格: 常用命令 | 作用 -- | -- uname -a | 查看内核/OS/CPU信息 uname -r | 查看内核版本 uname -m | 查看处理器架构 arch | 查看处理器架构 hostname | 查看计算机名 who | 显示当前登陆系统的用户 who am i | 显示登录时的用户名 whoami | 显示当前用户名 uptime | 查看系统运行时间、用户数、负载 env | 查看系统的环境变量</p><p>流程图：</p><div class="language-flow vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">flow</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>st=&gt;start: 开始</span></span>
<span class="line"><span>e=&gt;end: 结束</span></span>
<span class="line"><span>op=&gt;operation:执行某个代码块</span></span>
<span class="line"><span>cond=&gt;condition:是否满足条件</span></span>
<span class="line"><span>st-&gt;op-&gt;cond</span></span>
<span class="line"><span>cond(yes)-&gt;e</span></span>
<span class="line"><span>cond(no)-&gt;op</span></span></code></pre></div><p>待办事项：</p><ul><li>[ ] 操作系统学习 <ul><li>[x] 内存管理学习</li><li>[x] 进程管理学习</li><li>[ ] 文件系统学习</li></ul></li><li>[ ] 计算机网络学习 <ul><li>[x] 物理层</li><li>[x] 数据链路层</li><li>[ ] 网络层</li></ul></li></ul><p>列表:</p><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><p>1.有序列表1 2.有序列表2 3.有序列表3</p><p>引用:</p><blockquote><p>实际企业级开发和项目部署,大部分情况下基本都是基于Linux环境进行的,所以掌握常用的命令、配置、网络和系统管理,基本的shell编程等尽量还是要熟练一些,对后续项目实践都大有裨益。</p></blockquote><p>脚注[^note] [^note]: 关于脚注的补充解释</p>`,27),l=[p];function h(e,k,r,d,o,E){return a(),i("div",null,l)}const y=s(t,[["render",h]]);export{c as __pageData,y as default};
